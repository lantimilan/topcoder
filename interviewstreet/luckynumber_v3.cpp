// lucky numbers
//
// actually no, just recursion without memorization
// seems the subcases have very little overlap and set up map for memorization is too expensive
// use memorization since there are a lot of invalid states
//

#include <cstdio>
#include <cstring>
#include <map>
using namespace std;

const int SMAX=160;
const int QMAX=1600;
long long all[20][SMAX][QMAX];
long long small[20][SMAX][QMAX];
long long partial[20][10][SMAX][QMAX]; // pos, digit, sum, sqr
int table[]={ 
2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,
};

int sumtable[][15]={
{2,-1},
{3,-1},
{3,5,-1},
{5,7,-1},
{5,7,11,-1},
{5,7,11,13,-1},
{5,7,11,13,17,-1},
{7,11,13,17,-1},
{11,13,17,19,-1},
{7,11,13,17,19,-1},
{11,13,17,19,-1},
{7,11,13,17,19,23,-1},
{11,13,17,19,23,-1},
{11,13,17,19,23,-1},
{11,13,17,19,23,-1},
{11,13,17,19,23,29,-1},
{11,13,17,19,23,29,31,-1},
{11,13,17,19,23,29,31,-1},
{11,13,17,19,23,29,31,-1},
{13,17,19,23,29,31,-1},
{11,13,17,19,23,29,31,-1},
{17,19,23,29,31,37,-1},
{11,17,19,23,29,31,37,-1},
{13,17,19,23,29,31,37,-1},
{13,17,19,23,29,31,37,41,-1},
{17,19,23,29,31,37,41,-1},
{17,19,23,29,31,37,41,-1},
{17,19,23,29,31,37,41,43,-1},
{17,19,23,29,31,37,41,43,-1},
{17,19,23,29,31,37,41,43,-1},
{19,23,29,31,37,41,43,47,-1},
{17,19,23,29,31,37,41,43,47,-1},
{19,23,29,31,37,41,43,47,-1},
{19,23,29,31,37,41,43,47,-1},
{19,23,29,31,37,41,43,47,-1},
{23,29,31,37,41,43,47,-1},
{23,29,31,37,41,43,47,53,-1},
{19,23,29,31,37,41,43,47,53,-1},
{23,29,31,37,41,43,47,53,-1},
{23,29,31,37,41,43,47,53,-1},
{23,29,31,37,41,43,47,53,-1},
{23,29,31,37,41,43,47,53,-1},
{29,31,37,41,43,47,53,-1},
{29,31,37,41,43,47,53,-1},
{29,31,37,41,43,47,53,59,-1},
{29,31,37,41,43,47,53,59,-1},
{29,31,37,41,43,47,53,59,61,-1},
{29,31,37,41,43,47,53,59,61,-1},
{29,31,37,41,43,47,53,59,61,-1},
{29,31,37,41,43,47,53,59,61,-1},
{31,37,41,43,47,53,59,61,-1},
{31,37,41,43,47,53,59,61,-1},
{31,37,41,43,47,53,59,61,-1},
{31,37,41,43,47,53,59,61,-1},
{37,41,43,47,53,59,61,67,-1},
{37,41,43,47,53,59,61,67,-1},
{37,41,43,47,53,59,61,67,-1},
{37,41,43,47,53,59,61,67,-1},
{37,41,43,47,53,59,61,67,-1},
{37,41,43,47,53,59,61,67,71,-1},
{37,41,43,47,53,59,61,67,71,-1},
{37,41,43,47,53,59,61,67,71,-1},
{41,43,47,53,59,61,67,71,73,-1},
{37,41,43,47,53,59,61,67,71,73,-1},
{41,43,47,53,59,61,67,71,73,-1},
{41,43,47,53,59,61,67,71,73,-1},
{41,43,47,53,59,61,67,71,73,-1},
{41,43,47,53,59,61,67,71,73,-1},
{43,47,53,59,61,67,71,73,-1},
{41,43,47,53,59,61,67,71,73,-1},
{43,47,53,59,61,67,71,73,79,-1},
{47,53,59,61,67,71,73,79,-1},
{47,53,59,61,67,71,73,79,-1},
{43,47,53,59,61,67,71,73,79,-1},
{47,53,59,61,67,71,73,79,-1},
{47,53,59,61,67,71,73,79,-1},
{47,53,59,61,67,71,73,79,83,-1},
{47,53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,-1},
{47,53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,-1},
{53,59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{59,61,67,71,73,79,83,89,-1},
{61,67,71,73,79,83,89,-1},
{67,71,73,79,83,89,-1},
{61,67,71,73,79,83,89,-1},
{67,71,73,79,83,89,97,-1},
{67,71,73,79,83,89,97,-1},
{67,71,73,79,83,89,97,-1},
{67,71,73,79,83,89,97,-1},
{67,71,73,79,83,89,97,-1},
{67,71,73,79,83,89,97,101,-1},
{67,71,73,79,83,89,97,101,-1},
{71,73,79,83,89,97,101,-1},
{71,73,79,83,89,97,101,103,-1},
{71,73,79,83,89,97,101,103,-1},
{71,73,79,83,89,97,101,103,-1},
{71,73,79,83,89,97,101,103,-1},
{73,79,83,89,97,101,103,-1},
{71,73,79,83,89,97,101,103,-1},
{73,79,83,89,97,101,103,-1},
{71,79,83,89,97,101,103,-1},
{79,83,89,97,101,103,107,-1},
{79,83,89,97,101,103,107,-1},
{79,83,89,97,101,103,107,-1},
{79,83,89,97,101,103,107,-1},
{79,83,89,97,101,103,107,-1},
{79,83,89,97,101,103,107,109,-1},
{79,83,89,97,101,103,107,109,-1},
{79,83,89,97,101,103,107,109,-1},
{83,89,97,101,103,107,109,-1},
{83,89,97,101,103,107,109,-1},
{83,89,97,101,103,107,109,-1},
{83,89,97,101,103,107,109,-1},
{89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{83,89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{89,97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{97,101,103,107,109,113,-1},
{101,103,107,109,113,-1},
{101,103,107,109,113,-1},
{103,107,109,113,-1},
{101,103,107,109,113,-1},
{103,107,109,113,-1},
{103,107,109,113,127,-1},
{107,109,113,127,-1},
{107,109,113,127,-1},
{107,109,113,127,-1},
{109,113,127,-1},
{107,109,113,127,-1},
{109,113,127,-1},
{113,127,-1},
{113,127,131,-1},
{113,127,131,-1},
{113,127,131,-1},
{113,127,131,-1},
{113,127,131,-1},
{113,127,131,-1},
{127,131,-1},
{127,131,-1},
{127,131,-1},
{127,131,-1},
{127,131,-1},
{127,131,-1},
{127,131,-1},
{127,131,137,-1},
{127,131,137,-1},
{127,131,137,-1},
{127,131,137,-1},
{127,131,137,-1},
{127,131,137,139,-1},
{127,131,137,139,-1},
{127,131,137,139,-1},
{127,131,137,139,-1},
{127,131,137,139,-1},
{127,131,137,139,-1},
{131,137,139,-1},
{131,137,139,-1},
{131,137,139,-1},
{131,137,139,-1},
{131,137,139,-1},
{137,139,-1},
{137,139,-1},
{137,139,-1},
{137,139,-1},
{137,139,-1},
{137,139,-1},
{139,-1},
{137,139,-1},
{139,-1},
{-1},
{139,-1},
{149,-1},
{149,-1},
{149,-1},
{149,151,-1},
{149,151,-1},
{149,151,-1},
{149,151,-1},
{149,151,-1},
{149,151,-1},
{149,151,-1},
{151,-1},
{151,-1},
{151,-1},
{149,151,-1},
{151,-1},
{-1},
{-1},
{157,-1},
{157,-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
{-1},
};

int N;

void init()
{
    N=sizeof(table)/sizeof(int);
    memset(all, 0, sizeof all); 
    all[0][0][0]=1;
    for(int pos=0; pos<18; ++pos)
    for(int d=0; d<10; ++d)
    for(int sum=0; sum+d<SMAX; ++sum)
    for(int sqr=sum; sqr+d*d<QMAX; ++sqr)
    {
        all[pos+1][sum+d][sqr+d*d]+=all[pos][sum][sqr];
    }
    for(int pos=0; pos<18; ++pos)
    for(int d=0; d<10; ++d)
    for(int dd=d+1; dd<10; ++dd)
    for(int sum=0; sum+d<SMAX; ++sum)
    for(int sqr=sum; sqr+d*d<QMAX; ++sqr)
    {
        partial[pos+1][dd][sum+d][sqr+d*d]+=all[pos][sum][sqr];
    }
}

long long recurse(int pos, int digits[], int sum, int sqr)
{
    if (pos==0) {
        return sum==0 && sqr==0;
    }
    int d=digits[pos-1];
    long long ans=partial[pos][d][sum][sqr];
    if (sum>=d && sqr>=d*d && sum-d <= sqr-d*d)
        ans += recurse(pos-1, digits, sum-d, sqr-d*d);
    return ans;
}

long long calc(long long lim)
{
//printf("calc %lld ", lim);
    int limit[20]={0};
    int n;
    for(n=0; lim; lim/=10, ++n) {
        limit[n]=lim%10;
    }
    long long ans=0;

    // for a fixed sqr, only <10 sums are possible
    // and maxsum=157
    // see luckypart.cpp
    // store in sumtable[][]
    // 
    //for(int xs=0; xs<N && table[xs]<=47; ++xs)
    //for(int xq=0; xq<N; ++xq)
    //    ans+=recurse(n, limit, table[xs], table[xq]);
    for(int xq=0; xq<N; ++xq) {
    for(int xs=0; sumtable[xq][xs]>0; ++xs) {
        //printf("sum %d sqr %d\n", sumtable[xq][xs], table[xq]);
        ans+=recurse(n, limit, sumtable[xq][xs], table[xq]);
    }
    }
    return ans;
}

void solve()
{
    long long A, B; // 1<=A,B<=10^18 
    scanf("%lld%lld", &A, &B); 
    if (A==(long long)1.0e18) --A;
    if (B==(long long)1.0e18) --B;
    long long a = calc(A-1);
    long long b = calc(B);
    //printf("A %lld %lld B %lld %lld\n", A, a, B, b);
    printf("%lld: %lld\n", B, b-a);
    //printf("%lld\n", b-a);
}

int main()
{
    init();
    int T; scanf("%d", &T);
    for(int t=0; t<T; ++t)
        solve();
}
