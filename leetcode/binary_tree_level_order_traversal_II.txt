/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ans;
        if (root == NULL) return ans;
        vector<int> row;
        int level = 0;
        queue<pair<TreeNode*, int> > que; // node, level
        que.push(make_pair(root, 0));
        while (!que.empty()) {
            TreeNode *ptr = que.front().first;
            int curr = que.front().second;
            que.pop();
            if (ptr->left) {
                que.push(make_pair(ptr->left, curr+1));
            }
            if (ptr->right) {
                que.push(make_pair(ptr->right, curr+1));
            }
            if (curr > level) {                
                ans.push_back(row);
                row.clear();
                level = curr;
                row.push_back(ptr->val);
            } else {
                row.push_back(ptr->val);
            }
        }
        ans.push_back(row);
        reverse(ans.begin(), ans.end());
        return ans;
    }
};