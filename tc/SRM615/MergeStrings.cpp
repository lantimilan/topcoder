#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class MergeStrings {
public:
    bool match(char c1, char c2)
    {
        if (c1 == '?' || c2 == '?') return true;
        return c1 == c2;
    }

	string getmin(string S, string A, string B) {
		string dp[55][55];
        for (int i = 0; i <= A.size(); ++i)
        for (int j = 0; j <= B.size(); ++j)
            dp[i][j] = "X";
        dp[0][0] = "B";
        for (int i = 0; i <= A.size(); ++i)
        for (int j = 0; j <= B.size(); ++j)
        {
            // match A[i-1] with S[i+j-1]
            if (i-1 >= 0 && dp[i-1][j][0] != 'X') {
                if (match(A[i-1], S[i+j-1])) dp[i][j] = dp[i-1][j] + A[i-1];
            }
            // match B[j-1] with S[i+j-1]
            if (j-1 >= 0 && dp[i][j-1][0] != 'X') {
                if (match(B[j-1], S[i+j-1])) {
                    string cur = dp[i][j-1] + B[j-1];
                    if (dp[i][j][0] == 'X' || dp[i][j] > cur)
                        dp[i][j] = cur;
                }
            }
        }
        int n = A.size(), m = B.size();
        if (dp[n][m][0] == 'X') return "";
        else return dp[n][m].substr(1);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	MergeStrings *obj;
	string answer;
	obj = new MergeStrings();
	clock_t startTime = clock();
	answer = obj->getmin(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;
	string p3;

	{
	// ----- test 0 -----
	p0 = "?" "?CC?" "?";
	p1 = "ABC";
	p2 = "BCC";
	p3 = "ABCCBC";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "WHAT?";
	p1 = "THE";
	p2 = "WA";
	p3 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "PARROT";
	p1 = "PARROT";
	p2 = "";
	p3 = "PARROT";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = "AZZAA";
	p2 = "AZAZZA";
	p3 = "AAZAZZAAZZA";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?D?" "?" "?K?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?K?" "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?";
	p1 = "KKKKKDKKKDKKDDKDDDKDKK";
	p2 = "KDKDDKKKDDKDDKKKDKDKKDDDDDDD";
	p3 = "KDKDKDKKKDDKDDKKKDKDKKDKDDDKDDDKKDKKKDKKDDKDDDKDKK";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
