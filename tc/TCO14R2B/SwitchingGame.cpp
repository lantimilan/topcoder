#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SwitchingGame {
public:
	int timeToWin(vector <string> states) {
        int N = states.size();
        int M = states[0].size();
        int flip = 0;
        string cur = string(M, '-');
        for (int i = 0; i < N; ++i) {
            int on2off = 0, off2on = 0;
            string next = states[i];
            for (int p = 0; p < M; ++p) {
                if (cur[p] == '+' && next[p] == '-') on2off = 1;
                if (cur[p] == '-' && next[p] == '+') off2on = 1;
            }
            for (int p = 0; p < M; ++p) {
                if (next[p] == '?') next[p] = cur[p];
            }
            if (on2off) {
                for (int p = 0; p < M; ++p)
                    if (cur[p] == '+' && states[i][p] == '?') next[p] = '?';
            }
            if (off2on) {
                for (int p = 0; p < M; ++p)
                    if (cur[p] == '-' && states[i][p] == '?') next[p] = '?';
            }
            flip += on2off + off2on;
            cur = next;
        }
        return N + flip;
	}

    // these are legacy from competition code, not used any more
    void update(string &next, const string &cur, const vector<string> &states, int row)
    {
        int M = next.size();
        for (int p = 0; p < M; ++p) {
            if (next[p] == '?') {
                char target = get(states, row, p);
                if (target != '?') next[p] = target;
                else next[p] = cur[p];
            }
        }
    }

    char get(const vector<string> &states, int row, int col)
    {
        char ans = '?';
        for (int k = row+1; k < states.size(); ++k) {
            if (states[k][col] != '?') {
                ans = states[k][col]; break;
            }
        }
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SwitchingGame *obj;
	int answer;
	obj = new SwitchingGame();
	clock_t startTime = clock();
	answer = obj->timeToWin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"++--","--++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"+-++","+-++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"++","+?","?+","++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"+","?","?","?","-"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"+?" "?+++","++?" "?+-","?++?" "?+","?-+-?" "?","?" "?+?++","++-?+?","?++?-+","?--+++","-?" "?-?+"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
