#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


int NROW, NCOL;

class WolvesAndSheep {
public:
	int getmin(vector <string> field) {
        int ans = 20 * 20;
		NROW = field.size(); NCOL = field[0].size();
        for (int mask = 0; mask < (1 << (NROW-1)); ++mask) {
            int num_fence = 0;
            if (!check(field, mask)) continue;
            for (int i = 0; i < NROW - 1; ++i)
            if ((mask & 1 << i)) {  // fence at row i
                num_fence++;
            }
            num_fence += get_col_fence(field, mask);
            ans = min(ans, num_fence);
        }
        return ans;
	}

    bool check(vector<string> field, int mask) {
        for (int j = 0; j < NCOL; ++j) {
            int last = 0;
            while (last < NROW) {
                int next = last;
                while (next < NROW-1) {
                    if (1 << next & mask) break;
                    next++;
                }
                int sheep = 0, wolves = 0;
                for (int i = last; i <= next; ++i) {
                    if (field[i][j] == 'S') sheep = 1;
                    if (field[i][j] == 'W') wolves = 1;
                }
                if (sheep && wolves) return false;
                last = next + 1;
            }
        }
        return true;
    }

    int get_col_fence(vector<string> field, int mask) {
        vector<string> config;
        int last = 0;
        while (last < NROW) {
            int next = last;
            while (next < NROW-1) {
                if (1 << next & mask) break;
                next++;
            }
            string curr;
            for (int j = 0; j < NCOL; ++j) {
                char ch = '.';
                for (int i = last; i <= next; ++i)
                if (field[i][j] == 'S') {
                    ch = 'S';
                } else if (field[i][j] == 'W') {
                    ch = 'W';
                }
                curr += ch;
            }
            config.push_back(curr);
            last = next + 1;
        }

//        if (mask == 2) {
//            for (int i = 0; i < config.size(); ++i)
//                cout << config[i] << endl;
//        }

        int col_fence = 0;
        int prev_sheep[20] = {0};
        int prev_wolves[20] = {0};
        for (int j = 0; j < NCOL; ++j) {
            bool install = false;
            for (int i = 0; i < config.size(); ++i) {
                char ch = config[i][j];
                if (ch == 'S') {
                    if (prev_wolves[i]) install = true;
                } else if (ch == 'W') {
                    if (prev_sheep[i]) install = true;
                }
            }
            if (install) {
                col_fence++;
                for (int i = 0; i < config.size(); ++i) {
                    char ch = config[i][j];
                    prev_sheep[i] = prev_wolves[i] = 0;  // clear previous
                    if (ch == 'S') prev_sheep[i] = 1;
                    else if (ch == 'W') prev_wolves[i] = 1;
                }
            } else {
                for (int i = 0; i < config.size(); ++i) {
                    char ch = config[i][j];
                    if (ch == 'S') prev_sheep[i] = 1;
                    else if (ch == 'W') prev_wolves[i] = 1;
                }
            }
        }
        return col_fence;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WolvesAndSheep *obj;
	int answer;
	obj = new WolvesAndSheep();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"W.WSS","WW.S.",".SSS.","SSS.S",".SS.S"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {".....",".....","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {".SS","...","S..","W.W"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"WWWSWWSSWWW","WWSWW.SSWWW","WS.WSWWWWS."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {".W.S.W.W","W.W.S.W.",".S.S.W.W","S.S.S.W.",".S.W.W.S","S.S.W.W.",".W.W.W.S","W.W.S.S."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"W.SSWWSSSW.SS",".SSSSW.SSWWWW",".WWWWS.WSSWWS","SS.WSS..W.WWS","WSSS.SSWS.W.S","WSS.WS...WWWS","S.WW.S.SWWWSW","WSSSS.SSW...S","S.WWSW.WWSWSW",".WSSS.WWSWWWS","..SSSS.WWWSSS","SSWSWWS.W.SSW","S.WSWS..WSSS.","WS....W..WSS."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 24;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	string t0[] = {"WW..SS","WW..SS","......","......","SS..WW","SS..WW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
